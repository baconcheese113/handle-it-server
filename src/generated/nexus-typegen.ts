/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  EventWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  HubWhereUniqueInput: { // input type
    id?: number | null; // Int
    imei?: string | null; // String
    serial?: string | null; // String
  }
  LocationWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  NetworkMemberWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  NotificationOverrideWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  SensorEventsOrderByInput: { // input type
    createdAt?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
  SensorWhereUniqueInput: { // input type
    id?: number | null; // Int
    serial?: string | null; // String
  }
}

export interface NexusGenEnums {
  NetworkMemberStatus: "active" | "invited" | "requested"
  RoleType: "member" | "owner"
  SortOrder: "asc" | "desc"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Event: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    propagatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Hub: { // root type
    batteryLevel?: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    isArmed: boolean; // Boolean!
    isCharging?: boolean | null; // Boolean
    name: string; // String!
    ownerId: number; // Int!
    serial: string; // String!
  }
  Location: { // root type
    age: number; // Int!
    course: number; // Float!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hdop: number; // Float!
    id: number; // Int!
    lat: number; // Float!
    lng: number; // Float!
    speed: number; // Float!
  }
  Mutation: {};
  Network: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdById: number; // Int!
    id: number; // Int!
    name: string; // String!
  }
  NetworkMember: { // root type
    id: number; // Int!
    inviteeAcceptedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    inviterAcceptedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    networkId: number; // Int!
    role: NexusGenEnums['RoleType']; // RoleType!
    userId: number; // Int!
  }
  NotificationOverride: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hubId: number; // Int!
    id: number; // Int!
    isMuted: boolean; // Boolean!
    userId: number; // Int!
  }
  Query: {};
  Sensor: { // root type
    batteryLevel?: number | null; // Int
    doorColumn: number; // Int!
    doorRow: number; // Int!
    id: number; // Int!
    isConnected: boolean; // Boolean!
    isOpen: boolean; // Boolean!
    serial: string; // String!
  }
  User: { // root type
    activatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    defaultFullNotification: boolean; // Boolean!
    email: string; // String!
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
  }
  Viewer: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Event: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    propagatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    sensor: NexusGenRootTypes['Sensor']; // Sensor!
  }
  Hub: { // field return type
    batteryLevel: number | null; // Int
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    id: number; // Int!
    isArmed: boolean; // Boolean!
    isCharging: boolean | null; // Boolean
    latestVersion: number; // Int!
    locations: NexusGenRootTypes['Location'][]; // [Location!]!
    name: string; // String!
    networks: NexusGenRootTypes['Network'][]; // [Network!]!
    notificationOverride: NexusGenRootTypes['NotificationOverride'] | null; // NotificationOverride
    owner: NexusGenRootTypes['User']; // User!
    ownerId: number; // Int!
    sensors: NexusGenRootTypes['Sensor'][]; // [Sensor!]!
    serial: string; // String!
  }
  Location: { // field return type
    age: number; // Int!
    course: number; // Float!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fixedAt: NexusGenScalars['DateTime'] | null; // DateTime
    hdop: number; // Float!
    hub: NexusGenRootTypes['Hub']; // Hub!
    id: number; // Int!
    lat: number; // Float!
    lng: number; // Float!
    speed: number; // Float!
  }
  Mutation: { // field return type
    acceptNetworkMembership: NexusGenRootTypes['Network'] | null; // Network
    createEvent: NexusGenRootTypes['Event'] | null; // Event
    createHub: NexusGenRootTypes['Hub'] | null; // Hub
    createLocation: NexusGenRootTypes['Location'] | null; // Location
    createNetwork: NexusGenRootTypes['Network'] | null; // Network
    createNetworkMember: NexusGenRootTypes['NetworkMember'] | null; // NetworkMember
    createSensor: NexusGenRootTypes['Sensor'] | null; // Sensor
    declineNetworkMembership: NexusGenRootTypes['Network'] | null; // Network
    deleteHub: NexusGenRootTypes['Hub'] | null; // Hub
    deleteNetwork: NexusGenRootTypes['Network'] | null; // Network
    deleteNetworkMember: NexusGenRootTypes['Network'] | null; // Network
    loginAsHub: string | null; // String
    loginWithPassword: string | null; // String
    propagateEventToNetworks: NexusGenRootTypes['Event'] | null; // Event
    registerWithPassword: string | null; // String
    requestNetworkMembership: NexusGenRootTypes['NetworkMember'] | null; // NetworkMember
    seedUser: NexusGenRootTypes['User'] | null; // User
    updateHub: NexusGenRootTypes['Hub'] | null; // Hub
    updateNetworkMember: NexusGenRootTypes['NetworkMember'] | null; // NetworkMember
    updateNotificationOverride: NexusGenRootTypes['NotificationOverride'] | null; // NotificationOverride
    updateSensor: NexusGenRootTypes['Sensor'] | null; // Sensor
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Network: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdById: number; // Int!
    hubs: NexusGenRootTypes['Hub'][]; // [Hub!]!
    id: number; // Int!
    members: NexusGenRootTypes['NetworkMember'][]; // [NetworkMember!]!
    name: string; // String!
  }
  NetworkMember: { // field return type
    canDelete: boolean; // Boolean!
    id: number; // Int!
    inviteeAcceptedAt: NexusGenScalars['DateTime'] | null; // DateTime
    inviterAcceptedAt: NexusGenScalars['DateTime'] | null; // DateTime
    network: NexusGenRootTypes['Network']; // Network!
    networkId: number; // Int!
    role: NexusGenEnums['RoleType']; // RoleType!
    status: NexusGenEnums['NetworkMemberStatus'] | null; // NetworkMemberStatus
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
  }
  NotificationOverride: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    hub: NexusGenRootTypes['Hub']; // Hub!
    hubId: number; // Int!
    id: number; // Int!
    isMuted: boolean; // Boolean!
    user: NexusGenRootTypes['User']; // User!
    userId: number; // Int!
  }
  Query: { // field return type
    hub: NexusGenRootTypes['Hub'] | null; // Hub
    hubViewer: NexusGenRootTypes['Hub']; // Hub!
    viewer: NexusGenRootTypes['Viewer']; // Viewer!
  }
  Sensor: { // field return type
    batteryLevel: number | null; // Int
    doorColumn: number; // Int!
    doorRow: number; // Int!
    events: NexusGenRootTypes['Event'][]; // [Event!]!
    hub: NexusGenRootTypes['Hub']; // Hub!
    id: number; // Int!
    isConnected: boolean; // Boolean!
    isOpen: boolean; // Boolean!
    serial: string; // String!
  }
  User: { // field return type
    activatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    defaultFullNotification: boolean; // Boolean!
    displayName: string; // String!
    email: string; // String!
    firstName: string | null; // String
    hubs: NexusGenRootTypes['Hub'][]; // [Hub!]!
    id: number; // Int!
    isMe: boolean; // Boolean!
    lastName: string | null; // String
    networkMemberships: NexusGenRootTypes['NetworkMember'][]; // [NetworkMember!]!
    notificationOverrides: NexusGenRootTypes['NotificationOverride'][]; // [NotificationOverride!]!
  }
  Viewer: { // field return type
    hubs: NexusGenRootTypes['Hub'][]; // [Hub!]!
    latestSensorVersion: string; // String!
    networks: NexusGenRootTypes['Network'][]; // [Network!]!
    user: NexusGenRootTypes['User']; // User!
  }
}

export interface NexusGenFieldTypeNames {
  Event: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    propagatedAt: 'DateTime'
    sensor: 'Sensor'
  }
  Hub: { // field return type name
    batteryLevel: 'Int'
    createdAt: 'DateTime'
    events: 'Event'
    id: 'Int'
    isArmed: 'Boolean'
    isCharging: 'Boolean'
    latestVersion: 'Int'
    locations: 'Location'
    name: 'String'
    networks: 'Network'
    notificationOverride: 'NotificationOverride'
    owner: 'User'
    ownerId: 'Int'
    sensors: 'Sensor'
    serial: 'String'
  }
  Location: { // field return type name
    age: 'Int'
    course: 'Float'
    createdAt: 'DateTime'
    fixedAt: 'DateTime'
    hdop: 'Float'
    hub: 'Hub'
    id: 'Int'
    lat: 'Float'
    lng: 'Float'
    speed: 'Float'
  }
  Mutation: { // field return type name
    acceptNetworkMembership: 'Network'
    createEvent: 'Event'
    createHub: 'Hub'
    createLocation: 'Location'
    createNetwork: 'Network'
    createNetworkMember: 'NetworkMember'
    createSensor: 'Sensor'
    declineNetworkMembership: 'Network'
    deleteHub: 'Hub'
    deleteNetwork: 'Network'
    deleteNetworkMember: 'Network'
    loginAsHub: 'String'
    loginWithPassword: 'String'
    propagateEventToNetworks: 'Event'
    registerWithPassword: 'String'
    requestNetworkMembership: 'NetworkMember'
    seedUser: 'User'
    updateHub: 'Hub'
    updateNetworkMember: 'NetworkMember'
    updateNotificationOverride: 'NotificationOverride'
    updateSensor: 'Sensor'
    updateUser: 'User'
  }
  Network: { // field return type name
    createdAt: 'DateTime'
    createdById: 'Int'
    hubs: 'Hub'
    id: 'Int'
    members: 'NetworkMember'
    name: 'String'
  }
  NetworkMember: { // field return type name
    canDelete: 'Boolean'
    id: 'Int'
    inviteeAcceptedAt: 'DateTime'
    inviterAcceptedAt: 'DateTime'
    network: 'Network'
    networkId: 'Int'
    role: 'RoleType'
    status: 'NetworkMemberStatus'
    user: 'User'
    userId: 'Int'
  }
  NotificationOverride: { // field return type name
    createdAt: 'DateTime'
    hub: 'Hub'
    hubId: 'Int'
    id: 'Int'
    isMuted: 'Boolean'
    user: 'User'
    userId: 'Int'
  }
  Query: { // field return type name
    hub: 'Hub'
    hubViewer: 'Hub'
    viewer: 'Viewer'
  }
  Sensor: { // field return type name
    batteryLevel: 'Int'
    doorColumn: 'Int'
    doorRow: 'Int'
    events: 'Event'
    hub: 'Hub'
    id: 'Int'
    isConnected: 'Boolean'
    isOpen: 'Boolean'
    serial: 'String'
  }
  User: { // field return type name
    activatedAt: 'DateTime'
    defaultFullNotification: 'Boolean'
    displayName: 'String'
    email: 'String'
    firstName: 'String'
    hubs: 'Hub'
    id: 'Int'
    isMe: 'Boolean'
    lastName: 'String'
    networkMemberships: 'NetworkMember'
    notificationOverrides: 'NotificationOverride'
  }
  Viewer: { // field return type name
    hubs: 'Hub'
    latestSensorVersion: 'String'
    networks: 'Network'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Hub: {
    locations: { // args
      after?: NexusGenInputs['LocationWhereUniqueInput'] | null; // LocationWhereUniqueInput
      before?: NexusGenInputs['LocationWhereUniqueInput'] | null; // LocationWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    sensors: { // args
      after?: NexusGenInputs['SensorWhereUniqueInput'] | null; // SensorWhereUniqueInput
      before?: NexusGenInputs['SensorWhereUniqueInput'] | null; // SensorWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    acceptNetworkMembership: { // args
      networkMemberId: number; // Int!
    }
    createEvent: { // args
      serial: string; // String!
    }
    createHub: { // args
      imei: string; // String!
      name: string; // String!
      serial: string; // String!
    }
    createLocation: { // args
      age: number; // Int!
      course: number; // Float!
      hdop: number; // Float!
      lat: number; // Float!
      lng: number; // Float!
      speed: number; // Float!
    }
    createNetwork: { // args
      name: string; // String!
    }
    createNetworkMember: { // args
      email: string; // String!
      networkId: number; // Int!
      role: NexusGenEnums['RoleType']; // RoleType!
    }
    createSensor: { // args
      batteryLevel?: number | null; // Int
      doorColumn: number; // Int!
      doorRow: number; // Int!
      isConnected?: boolean | null; // Boolean
      isOpen?: boolean | null; // Boolean
      serial: string; // ID!
    }
    declineNetworkMembership: { // args
      networkMemberId: number; // Int!
    }
    deleteHub: { // args
      id: string; // ID!
    }
    deleteNetwork: { // args
      networkId: number; // Int!
    }
    deleteNetworkMember: { // args
      networkMemberId: number; // Int!
    }
    loginAsHub: { // args
      serial: string; // String!
      userId: string; // ID!
    }
    loginWithPassword: { // args
      email: string; // String!
      fcmToken: string; // String!
      password: string; // String!
    }
    propagateEventToNetworks: { // args
      eventId: number; // Int!
    }
    registerWithPassword: { // args
      email: string; // String!
      fcmToken: string; // String!
      firstName?: string | null; // String
      lastName?: string | null; // String
      password: string; // String!
    }
    requestNetworkMembership: { // args
      networkName: string; // String!
    }
    seedUser: { // args
      email: string; // String!
      firstName?: string | null; // String
      lat: number; // Float!
      lng: number; // Float!
    }
    updateHub: { // args
      batteryLevel?: number | null; // Int
      id: string; // ID!
      isArmed?: boolean | null; // Boolean
      isCharging?: boolean | null; // Boolean
      name?: string | null; // String
    }
    updateNetworkMember: { // args
      networkMemberId: number; // Int!
      role?: NexusGenEnums['RoleType'] | null; // RoleType
    }
    updateNotificationOverride: { // args
      hubId: number; // Int!
      shouldMute: boolean; // Boolean!
    }
    updateSensor: { // args
      id: string; // ID!
      isOpen?: boolean | null; // Boolean
    }
    updateUser: { // args
      defaultFullNotification?: boolean | null; // Boolean
      firstName?: string | null; // String
      lastName?: string | null; // String
    }
  }
  Network: {
    members: { // args
      after?: NexusGenInputs['NetworkMemberWhereUniqueInput'] | null; // NetworkMemberWhereUniqueInput
      before?: NexusGenInputs['NetworkMemberWhereUniqueInput'] | null; // NetworkMemberWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    hub: { // args
      id: number; // Int!
    }
  }
  Sensor: {
    events: { // args
      after?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      before?: NexusGenInputs['EventWhereUniqueInput'] | null; // EventWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['SensorEventsOrderByInput'][] | null; // [SensorEventsOrderByInput!]
    }
  }
  User: {
    hubs: { // args
      after?: NexusGenInputs['HubWhereUniqueInput'] | null; // HubWhereUniqueInput
      before?: NexusGenInputs['HubWhereUniqueInput'] | null; // HubWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    networkMemberships: { // args
      after?: NexusGenInputs['NetworkMemberWhereUniqueInput'] | null; // NetworkMemberWhereUniqueInput
      before?: NexusGenInputs['NetworkMemberWhereUniqueInput'] | null; // NetworkMemberWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    notificationOverrides: { // args
      after?: NexusGenInputs['NotificationOverrideWhereUniqueInput'] | null; // NotificationOverrideWhereUniqueInput
      before?: NexusGenInputs['NotificationOverrideWhereUniqueInput'] | null; // NotificationOverrideWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Viewer: {
    networks: { // args
      status?: NexusGenEnums['NetworkMemberStatus'] | null; // NetworkMemberStatus
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}