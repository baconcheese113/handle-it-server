### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Event {
  createdAt: DateTime!
  id: Int!
  sensor: Sensor!
}

input EventWhereUniqueInput {
  id: Int
}

type Hub {
  batteryLevel: Int
  createdAt: DateTime!
  id: Int!
  isArmed: Boolean!
  isCharging: Boolean
  latestVersion: Int!
  locations(after: LocationWhereUniqueInput, before: LocationWhereUniqueInput, first: Int, last: Int): [Location!]!
  name: String!
  owner: User!
  sensors(after: SensorWhereUniqueInput, before: SensorWhereUniqueInput, first: Int, last: Int): [Sensor!]!
  serial: String!
}

input HubWhereUniqueInput {
  id: Int
  serial: String
}

type Location {
  """Age of this location (in ms)"""
  age: Int!

  """Ground course (in degrees)"""
  course: Float!
  createdAt: DateTime!

  """Horizontal diminution of precision (in meters)"""
  hdop: Float!
  hub: Hub!
  id: Int!

  """Latitude (in degrees)"""
  lat: Float!

  """Longitude (in degrees)"""
  lng: Float!

  """Speed in KMPH (always slight movement)"""
  speed: Float!
}

input LocationWhereUniqueInput {
  id: Int
}

type Mutation {
  createEvent(serial: String!): Event
  createHub(name: String!, serial: String!): Hub
  createLocation(age: Int!, course: Float!, hdop: Float!, lat: Float!, lng: Float!, speed: Float!): Location
  createSensor(batteryLevel: Int, doorColumn: Int!, doorRow: Int!, isConnected: Boolean, isOpen: Boolean, serial: ID!): Sensor
  deleteHub(id: ID!): Hub
  loginAsHub(serial: String!, userId: ID!): String
  loginWithPassword(email: String!, fcmToken: String!, password: String!): String
  registerWithPassword(email: String!, fcmToken: String!, firstName: String, lastName: String, password: String!): String
  updateHub(batteryLevel: Int, id: ID!, isArmed: Boolean, isCharging: Boolean, name: String): Hub
  updateSensor(id: ID!, isOpen: Boolean): Sensor
  updateUser(defaultFullNotification: Boolean, firstName: String, lastName: String): User
}

type Query {
  hubViewer: Hub!
  viewer: Viewer!
}

type Sensor {
  batteryLevel: Int
  doorColumn: Int!
  doorRow: Int!
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int, orderBy: [SensorEventsOrderByInput!]): [Event!]!
  hub: Hub!
  id: Int!
  isConnected: Boolean!
  isOpen: Boolean!
  serial: String!
}

input SensorEventsOrderByInput {
  createdAt: SortOrder
}

input SensorWhereUniqueInput {
  id: Int
  serial: String
}

enum SortOrder {
  asc
  desc
}

type User {
  defaultFullNotification: Boolean!
  displayName: String!
  email: String!
  firstName: String
  hubs(after: HubWhereUniqueInput, before: HubWhereUniqueInput, first: Int, last: Int): [Hub!]!
  id: Int!
  lastName: String
}

type Viewer {
  hubs: [Hub!]!
  latestSensorVersion: String!
  user: User!
}