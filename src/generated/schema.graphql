### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

type Event {
  id: Int!
  sensor: Sensor!
  time: DateTime!
}

input EventCreateInput {
  createdAt: DateTime
  sensor: SensorCreateNestedOneWithoutEventsInput!
  time: DateTime
  updatedAt: DateTime
}

input EventCreateManySensorInput {
  createdAt: DateTime
  id: Int
  time: DateTime
  updatedAt: DateTime
}

input EventCreateManySensorInputEnvelope {
  data: [EventCreateManySensorInput!]
  skipDuplicates: Boolean
}

input EventCreateNestedManyWithoutSensorInput {
  connect: [EventWhereUniqueInput!]
  connectOrCreate: [EventCreateOrConnectWithoutSensorInput!]
  create: [EventCreateWithoutSensorInput!]
  createMany: EventCreateManySensorInputEnvelope
}

input EventCreateOrConnectWithoutSensorInput {
  create: EventCreateWithoutSensorInput!
  where: EventWhereUniqueInput!
}

input EventCreateWithoutSensorInput {
  createdAt: DateTime
  time: DateTime
  updatedAt: DateTime
}

input EventWhereUniqueInput {
  id: Int
}

type Hub {
  batteryLevel: Int
  createdAt: DateTime!
  id: Int!
  isCharging: Boolean
  name: String!
  owner: User!
  sensors(after: SensorWhereUniqueInput, before: SensorWhereUniqueInput, first: Int, last: Int): [Sensor!]!
  serial: String!
}

input HubCreateInput {
  batteryLevel: Int
  createdAt: DateTime
  isCharging: Boolean
  name: String!
  owner: UserCreateNestedOneWithoutHubsInput!
  sensors: SensorCreateNestedManyWithoutHubInput
  serial: String!
  updatedAt: DateTime
}

input HubCreateNestedOneWithoutSensorsInput {
  connect: HubWhereUniqueInput
  connectOrCreate: HubCreateOrConnectWithoutSensorsInput
  create: HubCreateWithoutSensorsInput
}

input HubCreateOrConnectWithoutSensorsInput {
  create: HubCreateWithoutSensorsInput!
  where: HubWhereUniqueInput!
}

input HubCreateWithoutSensorsInput {
  batteryLevel: Int
  createdAt: DateTime
  isCharging: Boolean
  name: String!
  owner: UserCreateNestedOneWithoutHubsInput!
  serial: String!
  updatedAt: DateTime
}

input HubWhereUniqueInput {
  id: Int
  serial: String
}

type Mutation {
  createOneEvent(data: EventCreateInput!): Event!
  createOneHub(data: HubCreateInput!): Hub!
  createOneSensor(data: SensorCreateInput!): Sensor!
  loginWithPassword(email: String!, fcmToken: String!, password: String!): String
  registerWithPassword(email: String!, fcmToken: String!, firstName: String, lastName: String, password: String!): String
  sendNotification: Boolean
  updateUser(firstName: String, lastName: String): User
}

type Query {
  viewer: Viewer!
}

type Sensor {
  batteryLevel: Int
  doorColumn: Int!
  doorRow: Int!
  events(after: EventWhereUniqueInput, before: EventWhereUniqueInput, first: Int, last: Int): [Event!]!
  hub: Hub!
  id: Int!
  isArmed: Boolean!
  isConnected: Boolean!
  isOpen: Boolean!
  serial: String!
}

input SensorCreateInput {
  batteryLevel: Int
  createdAt: DateTime
  doorColumn: Int!
  doorRow: Int!
  events: EventCreateNestedManyWithoutSensorInput
  hub: HubCreateNestedOneWithoutSensorsInput!
  isArmed: Boolean!
  isConnected: Boolean!
  isOpen: Boolean!
  serial: String!
  updatedAt: DateTime
}

input SensorCreateManyHubInput {
  batteryLevel: Int
  createdAt: DateTime
  doorColumn: Int!
  doorRow: Int!
  id: Int
  isArmed: Boolean!
  isConnected: Boolean!
  isOpen: Boolean!
  serial: String!
  updatedAt: DateTime
}

input SensorCreateManyHubInputEnvelope {
  data: [SensorCreateManyHubInput!]
  skipDuplicates: Boolean
}

input SensorCreateNestedManyWithoutHubInput {
  connect: [SensorWhereUniqueInput!]
  connectOrCreate: [SensorCreateOrConnectWithoutHubInput!]
  create: [SensorCreateWithoutHubInput!]
  createMany: SensorCreateManyHubInputEnvelope
}

input SensorCreateNestedOneWithoutEventsInput {
  connect: SensorWhereUniqueInput
  connectOrCreate: SensorCreateOrConnectWithoutEventsInput
  create: SensorCreateWithoutEventsInput
}

input SensorCreateOrConnectWithoutEventsInput {
  create: SensorCreateWithoutEventsInput!
  where: SensorWhereUniqueInput!
}

input SensorCreateOrConnectWithoutHubInput {
  create: SensorCreateWithoutHubInput!
  where: SensorWhereUniqueInput!
}

input SensorCreateWithoutEventsInput {
  batteryLevel: Int
  createdAt: DateTime
  doorColumn: Int!
  doorRow: Int!
  hub: HubCreateNestedOneWithoutSensorsInput!
  isArmed: Boolean!
  isConnected: Boolean!
  isOpen: Boolean!
  serial: String!
  updatedAt: DateTime
}

input SensorCreateWithoutHubInput {
  batteryLevel: Int
  createdAt: DateTime
  doorColumn: Int!
  doorRow: Int!
  events: EventCreateNestedManyWithoutSensorInput
  isArmed: Boolean!
  isConnected: Boolean!
  isOpen: Boolean!
  serial: String!
  updatedAt: DateTime
}

input SensorWhereUniqueInput {
  id: Int
  serial: String
}

type User {
  displayName: String!
  email: String!
  firstName: String
  hubs(after: HubWhereUniqueInput, before: HubWhereUniqueInput, first: Int, last: Int): [Hub!]!
  id: Int!
  lastName: String
}

input UserCreateNestedOneWithoutHubsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutHubsInput
  create: UserCreateWithoutHubsInput
}

input UserCreateOrConnectWithoutHubsInput {
  create: UserCreateWithoutHubsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutHubsInput {
  createdAt: DateTime
  email: String!
  fcmToken: String!
  firstName: String
  lastName: String
  password: String!
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Viewer {
  hubs: [Hub!]!
  user: User!
}
