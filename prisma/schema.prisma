// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../src/generated/pothos-types.ts"
}

model User {
  id                      Int                    @id @default(autoincrement())
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @default(now()) @updatedAt
  email                   String                 @unique
  password                String?
  fcmToken                String?
  firstName               String?                @db.VarChar(255)
  lastName                String?                @db.VarChar(255)
  activatedAt             DateTime?
  isAdmin                 Boolean                @default(false)
  defaultFullNotification Boolean                @default(true)
  hubs                    Hub[]
  networkMemberships      NetworkMember[]
  notificationOverrides   NotificationOverride[]
}

model Hub {
  id                    Int                    @id @default(autoincrement())
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  name                  String
  serial                String                 @unique
  imei                  String                 @unique
  batteryLevel          Int?
  isCharging            Boolean?
  isArmed               Boolean                @default(false)
  ownerId               Int
  owner                 User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  sensors               Sensor[]
  locations             Location[]
  notificationOverrides NotificationOverride[]
  batteryLevels         BatteryLevel[]
  vehicle               Vehicle?
}

model Sensor {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  serial       String   @unique
  batteryLevel Int?
  isOpen       Boolean
  isConnected  Boolean
  doorColumn   Int
  doorRow      Int
  hubId        Int
  hub          Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  events       Event[]
}

model Event {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  sensorId     Int
  sensor       Sensor    @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  propagatedAt DateTime?
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  /// Latitude (in degrees)
  lat       Float
  /// Longitude (in degrees)
  lng       Float
  /// Horizontal diminution of precision (in meters)
  hdop      Float
  /// Speed in KMPH (always slight movement)
  speed     Float
  /// Ground course (in degrees)
  course    Float
  /// Age of this location (in ms)
  age       Int
  hubId     Int
  hub       Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
}

enum RoleType {
  member
  owner
}

model NetworkMember {
  id                Int       @id @default(autoincrement())
  role              RoleType  @default(member)
  userId            Int
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  networkId         Int
  network           Network   @relation(fields: [networkId], references: [id], onDelete: Cascade)
  inviteeAcceptedAt DateTime?
  inviterAcceptedAt DateTime?
}

model Network {
  id          Int             @id @default(autoincrement())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  name        String
  createdById Int
  members     NetworkMember[]
}

model NotificationOverride {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hubId     Int
  hub       Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  isMuted   Boolean  @default(true)
  createdAt DateTime @default(now())
}

model BatteryLevel {
  id        Int      @id @default(autoincrement())
  volts     Float
  percent   Float
  hubId     Int?
  hub       Hub?     @relation(fields: [hubId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  carQueryId String
  year       Int
  makeId     String
  modelName  String
  modelTrim  String
  modelBody  String
  color      String?
  notes      String?
  hubId      Int      @unique
  hub        Hub      @relation(fields: [hubId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}
